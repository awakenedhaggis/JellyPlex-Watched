# Check the mark.log file that is generated by the CI to make sure it contains the expected values

import os, argparse

def parse_args():
    parser = argparse.ArgumentParser(description="Check the mark.log file that is generated by the CI to make sure it contains the expected values")
    parser.add_argument("--dry", action="store_true", help="Check the mark.log file for dry-run")
    parser.add_argument("--write", action="store_true", help="Check the mark.log file for write-run")
    
    return parser.parse_args()

def read_marklog():
    marklog = os.path.join(os.getcwd(), "mark.log")
    with open(marklog, "r") as f:
        lines = f.readlines()
    return lines


def check_marklog(lines, expected_values):
    try:
        # Check to make sure the marklog contains all the expected values and nothing else
        found_values = []
        for line in lines:
            # Remove the newline character
            line = line.strip()
            if line not in expected_values:
                raise Exception("Line not found in marklog: " + line)

            found_values.append(line)

        # Check to make sure the marklog contains the same number of values as the expected values
        if len(found_values) != len(expected_values):
            raise Exception(
                "Marklog did not contain the same number of values as the expected values, found "
                + str(len(found_values))
                + " values, expected "
                + str(len(expected_values))
                + " values"
            )

        # Check that the two lists contain the same values
        if sorted(found_values) != sorted(expected_values):
            raise Exception(
                "Marklog did not contain the same values as the expected values, found:\n"
                + "\n".join(sorted(found_values))
                + "\n\nExpected:\n"
                + "\n".join(sorted(expected_values))
            )

        return True
    except Exception as e:
        print(e)
        return False


def main():
    args = parse_args()

    # Expected values for the mark.log file, dry-run is slightly different than write-run
    # due to some of the items being copied over from one server to another and now being there
    # for the next server run.
    if args.dry:
        expected_values = [
            # Jellyfin -> Plex
            "jellyplex_watched/Movies/Five Nights at Freddy's",
            "jellyplex_watched/Movies/The Hunger Games: The Ballad of Songbirds & Snakes/301215",
            "jellyplex_watched/TV Shows/Doctor Who (2005)/Rose",
            "jellyplex_watched/TV Shows/Doctor Who (2005)/The End of the World/300670",
            "jellyplex_watched/TV Shows/Monarch: Legacy of Monsters/Aftermath",
            "jellyplex_watched/TV Shows/Monarch: Legacy of Monsters/Departure/300741",
            # Plex -> Jellyfin
            "JellyUser/Movies/Big Buck Bunny",
            "JellyUser/Shows/Doctor Who/The Unquiet Dead",
            "JellyUser/Shows/Monarch: Legacy of Monsters/Secrets and Lies",
            # Emby -> Plex
            "jellyplex_watched/Movies/Tears of Steel",
            "jellyplex_watched/TV shows/Doctor Who (2005)/World War Three (2)",
            "jellyplex_watched/TV shows/Monarch: Legacy of Monsters/Parallels and Interiors/240429",
            # Plex -> Emby
            "jellyplex_watched/Movies/Big Buck Bunny",
            "jellyplex_watched/Movies/The Family Plan",
            # Emby -> Jellyfin
            "JellyUser/Movies/Tears of Steel",
            # Jellyfin -> Emby
            "jellyplex_watched/Movies/The Family Plan",
            "jellyplex_watched/Movies/Five Nights at Freddy's"
        ]
    
    elif args.write:
        expected_values = [
            "jellyplex_watched/Movies/Five Nights at Freddy's",
            "jellyplex_watched/Movies/The Hunger Games: The Ballad of Songbirds & Snakes/301215",
            "jellyplex_watched/TV Shows/Doctor Who (2005)/Rose",
            "jellyplex_watched/TV Shows/Doctor Who (2005)/The End of the World/300670",
            "jellyplex_watched/TV Shows/Monarch: Legacy of Monsters/Aftermath",
            "jellyplex_watched/TV Shows/Monarch: Legacy of Monsters/Departure/300741",
            "JellyUser/Movies/Big Buck Bunny",
            "JellyUser/Shows/Doctor Who/The Unquiet Dead",
            "JellyUser/Shows/Monarch: Legacy of Monsters/Secrets and Lies",
            "jellyplex_watched/Movies/Tears of Steel",
            "jellyplex_watched/TV shows/Doctor Who (2005)/World War Three (2)",
            "jellyplex_watched/TV shows/Monarch: Legacy of Monsters/Parallels and Interiors/240429",
            "jellyplex_watched/Movies/Big Buck Bunny",
            "jellyplex_watched/Movies/The Family Plan",
            "jellyplex_watched/Movies/Five Nights at Freddy's",
            "JellyUser/Movies/Tears of Steel",
            "jellyplex_watched/TV shows/Doctor Who (2005)/World War Three (2)",
            "jellyplex_watched/TV shows/Monarch: Legacy of Monsters/Parallels and Interiors/240429"
        ]

    lines = read_marklog()
    if not check_marklog(lines, expected_values):
        print("Failed to validate marklog")
        exit(1)

    print("Successfully validated marklog")
    exit(0)


if __name__ == "__main__":
    main()
